/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package TelasRelatorios;

import TelasInternas.*;
import Controllers.Consultas;
import Controllers.Pacientes;
import Modulos.IdAutomatico;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import java.util.Objects;

/**
 *
 * @author tung tung tung sahur
 */
public class HistoricoMedicos extends javax.swing.JInternalFrame {

    private static final String FILE_PATH_MEDICOS = "data/medicos.csv";
    private static final String FILE_PATH_PLANOS = "data/planosDeSaude.csv";
    private static final String FILE_PATH_PACIENTES = "data/pacientes.csv";
    private static final String FILE_PATH_SALAS = "data/salasConsultas.csv";
    private static final String FILE_PATH_CONSULTAS = "data/consultas.csv";

    ConsultasAdministracao ca = new ConsultasAdministracao();

    private Integer idMedico;
    String linhaHorario;

    /**
     * Creates new form AgendamentoConsultas
     */
    public HistoricoMedicos() {
        initComponents();
        tabelaHorarios.getTableHeader().setReorderingAllowed(false);
        tabelaConsultas.getTableHeader().setReorderingAllowed(false);
        tabelaMedicos.getTableHeader().setReorderingAllowed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaMedicos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaHorarios = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabelaConsultas = new javax.swing.JTable();
        pesquisarMedico = new javax.swing.JLabel();
        pesquisarConsulta = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Calibri Light", 0, 36)); // NOI18N
        jLabel1.setText("Estatística dos Médicos");

        jLabel4.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel4.setText("Médicos");

        jLabel5.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel5.setText("Horários Disponíveis");

        tabelaMedicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Cpf", "Crm", "Custo da Consulta", "Especialidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaMedicos.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tabelaMedicosAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tabelaMedicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMedicosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaMedicos);
        if (tabelaMedicos.getColumnModel().getColumnCount() > 0) {
            tabelaMedicos.getColumnModel().getColumn(0).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(1).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(2).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(3).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(4).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(5).setResizable(false);
        }

        tabelaHorarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dia", "Hora"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaHorarios.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tabelaHorariosAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tabelaHorarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaHorariosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabelaHorarios);
        if (tabelaHorarios.getColumnModel().getColumnCount() > 0) {
            tabelaHorarios.getColumnModel().getColumn(0).setResizable(false);
            tabelaHorarios.getColumnModel().getColumn(1).setResizable(false);
        }

        tabelaConsultas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome do Médico", "Nome do Paciente", "Horario da Consulta", "Sala da Consulta", "Situação", "Custo da Consulta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaConsultas.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tabelaConsultasAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tabelaConsultas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaConsultasMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tabelaConsultas);

        pesquisarMedico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/search_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        pesquisarMedico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pesquisarMedicoMouseClicked(evt);
            }
        });

        pesquisarConsulta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/search_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        pesquisarConsulta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pesquisarConsultaMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel6.setText("Histórico de Consultas");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(350, 350, 350))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pesquisarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(135, 135, 135)
                                .addComponent(jLabel5)))
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pesquisarConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 788, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(394, 394, 394)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pesquisarConsulta))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pesquisarMedico)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tabelaMedicosAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tabelaMedicosAncestorAdded
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaMedicos.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_MEDICOS))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                return;
            } else {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], data[3], Float.parseFloat(data[5]), data[4]};
                modelTabela.addRow(dados);
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], data[3], Float.parseFloat(data[5]), data[4]};
                modelTabela.addRow(dados);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática dos IDs");
        }
    }//GEN-LAST:event_tabelaMedicosAncestorAdded

    private void tabelaHorariosAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tabelaHorariosAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_tabelaHorariosAncestorAdded

    private void tabelaMedicosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMedicosMouseClicked
        idMedico = Integer.parseInt(tabelaMedicos.getValueAt(tabelaMedicos.getSelectedRow(), 0).toString());
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaHorarios.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_MEDICOS))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(Integer.parseInt(data[0]) == idMedico)  {
                    String[] horario = data[6].split(";");
                    for (String s : horario) {
                        String[] dataHora = s.split("-");
                        // Data e Hora
                        Object[] dados = {dataHora[0], dataHora[1]};
                        modelTabela.addRow(dados);
                    }
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática das datas.");
        }

        this.criarTabelaConsultas();
    }//GEN-LAST:event_tabelaMedicosMouseClicked

    private void tabelaHorariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaHorariosMouseClicked
        linhaHorario = tabelaHorarios.getValueAt(tabelaHorarios.getSelectedRow(), 0).toString() + "-" + tabelaHorarios.getValueAt(tabelaHorarios.getSelectedRow(), 1).toString();
    }//GEN-LAST:event_tabelaHorariosMouseClicked

    private void tabelaConsultasAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tabelaConsultasAncestorAdded
    }//GEN-LAST:event_tabelaConsultasAncestorAdded

    private void tabelaConsultasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaConsultasMouseClicked

    }//GEN-LAST:event_tabelaConsultasMouseClicked

    private void pesquisarMedicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pesquisarMedicoMouseClicked

        String nomeUsuario = JOptionPane.showInputDialog("Digite o nome do médico: ");
        if(nomeUsuario == null) {
            JOptionPane.showMessageDialog(null, "Operação cancelada!");
            return;
        }

        if(nomeUsuario.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nada foi digitado!");
            return;
        }

        DefaultTableModel modelTabela = (DefaultTableModel) tabelaMedicos.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_MEDICOS))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                JOptionPane.showMessageDialog(null, "Não existe nenhum médico!");
                return;
            } else {
                String[] data = linha.split(",");
                if(data[1].toLowerCase().contains(nomeUsuario.toLowerCase()))  {
                    Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], data[3], Float.parseFloat(data[5]), data[4] };
                    modelTabela.addRow(dados);
                }
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(data[1].toLowerCase().contains(nomeUsuario.toLowerCase()))  {
                    Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], data[3], Float.parseFloat(data[5]), data[4] };
                    modelTabela.addRow(dados);
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na pesquisa dos pacientes!");
        }
    }//GEN-LAST:event_pesquisarMedicoMouseClicked

    private void pesquisarConsultaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pesquisarConsultaMouseClicked
        String nomeUsuario = JOptionPane.showInputDialog("Digite o nome do paciente: ");
        if(nomeUsuario == null) {
            JOptionPane.showMessageDialog(null, "Operação cancelada!");
            return;
        }

        if(nomeUsuario.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nada foi digitado!");
            return;
        }

        DefaultTableModel modelTabela = (DefaultTableModel) tabelaConsultas.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_CONSULTAS))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                JOptionPane.showMessageDialog(null, "Não existe nenhuma consulta!");
                return;
            } else {
                String[] data = linha.split(",");
                if(ca.retornaNomePaciente(Integer.parseInt(data[1])).toLowerCase().contains(nomeUsuario.toLowerCase()) && Objects.equals(data[5], "Concluída"))  {
                    Object[] dados = { data[0], ca.retornaNomeMedico(Integer.parseInt(data[2])), ca.retornaNomePaciente(Integer.parseInt(data[1])), data[3], data[4], data[5], Double.parseDouble(data[6])};
                    modelTabela.addRow(dados);
                }
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(ca.retornaNomePaciente(Integer.parseInt(data[1])).toLowerCase().contains(nomeUsuario.toLowerCase()) && Objects.equals(data[5], "Concluída"))  {
                    Object[] dados = { data[0], ca.retornaNomeMedico(Integer.parseInt(data[2])), ca.retornaNomePaciente(Integer.parseInt(data[1])), data[3], data[4], data[5], Double.parseDouble(data[6])};
                    modelTabela.addRow(dados);
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na pesquisa dos pacientes!");
        }
    }//GEN-LAST:event_pesquisarConsultaMouseClicked

    private void criarTabelaConsultas() {
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaConsultas.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_CONSULTAS))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");

                if(Objects.equals(data[5], "Concluída") && Integer.parseInt(data[2]) == idMedico) {
                    Object[] dados = { data[0], ca.retornaNomeMedico(Integer.parseInt(data[2])), ca.retornaNomePaciente(Integer.parseInt(data[1])), data[3], data[4], data[5], Double.parseDouble(data[6])};
                    modelTabela.addRow(dados);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na criação automática da lista de consultas");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel pesquisarConsulta;
    private javax.swing.JLabel pesquisarMedico;
    private javax.swing.JTable tabelaConsultas;
    private javax.swing.JTable tabelaHorarios;
    private javax.swing.JTable tabelaMedicos;
    // End of variables declaration//GEN-END:variables
}
