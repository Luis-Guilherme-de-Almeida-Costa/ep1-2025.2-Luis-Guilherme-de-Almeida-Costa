 /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package TelasRelatorios;

import TelasInternas.*;
import Controllers.Pacientes;
import Modulos.IdAutomatico;
import Modulos.Validator;

import java.io.*;

import java.util.ArrayList;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.util.Arrays;

public class HistoricoPaciente extends javax.swing.JInternalFrame {

    private static final String FILE_PATH_PACIENTES = "data/pacientes.csv";
    private static final String FILE_PATH_PLANO = "data/planosDeSaude.csv";
    private static final String FILE_PATH_INTERNACOES = "data/internacoes.csv";
    private static final String FILE_PATH_CONSULTAS = "data/consultas.csv";

    ConsultasAdministracao ca = new ConsultasAdministracao();

    int id = -1;
    String cpf;

    public HistoricoPaciente() {
        initComponents();
        tabelaPacientes.getTableHeader().setReorderingAllowed(false);
        tabelaConsultas.getTableHeader().setReorderingAllowed(false);
        tabelaInternacoes.getTableHeader().setReorderingAllowed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaPacientes = new javax.swing.JTable();
        pesquisarPaciente = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabelaInternacoes = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        pesquisarInternacoes = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabelaConsultas = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        pesquisarConsulta = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Calibri Light", 0, 36)); // NOI18N
        jLabel1.setText("Historico Pacientes");

        tabelaPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Cpf", "Idade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaPacientes.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tabelaPacientesAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tabelaPacientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaPacientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaPacientes);
        if (tabelaPacientes.getColumnModel().getColumnCount() > 0) {
            tabelaPacientes.getColumnModel().getColumn(0).setResizable(false);
            tabelaPacientes.getColumnModel().getColumn(1).setResizable(false);
            tabelaPacientes.getColumnModel().getColumn(2).setResizable(false);
            tabelaPacientes.getColumnModel().getColumn(3).setResizable(false);
        }

        pesquisarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/search_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        pesquisarPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pesquisarPacienteMouseClicked(evt);
            }
        });

        tabelaInternacoes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome do Médico", "Nome do Paciente", "Horario da Internação", "Sala da Internação", "Situação", "Custo da Internação", "Saída"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tabelaInternacoes);
        if (tabelaInternacoes.getColumnModel().getColumnCount() > 0) {
            tabelaInternacoes.getColumnModel().getColumn(0).setResizable(false);
            tabelaInternacoes.getColumnModel().getColumn(1).setResizable(false);
            tabelaInternacoes.getColumnModel().getColumn(2).setResizable(false);
            tabelaInternacoes.getColumnModel().getColumn(3).setResizable(false);
            tabelaInternacoes.getColumnModel().getColumn(4).setResizable(false);
            tabelaInternacoes.getColumnModel().getColumn(6).setResizable(false);
            tabelaInternacoes.getColumnModel().getColumn(7).setResizable(false);
        }

        jLabel4.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel4.setText("Pacientes");

        jLabel6.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel6.setText("Internações");

        pesquisarInternacoes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/search_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        pesquisarInternacoes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pesquisarInternacoesMouseClicked(evt);
            }
        });

        tabelaConsultas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome do Médico", "Nome do Paciente", "Horario da Consulta", "Sala da Consulta", "Situação", "Custo da Consulta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tabelaConsultas);

        jLabel7.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel7.setText("Histórico de Consultas");

        pesquisarConsulta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/search_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        pesquisarConsulta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pesquisarConsultaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(423, 423, 423))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pesquisarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addGap(75, 75, 75)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pesquisarInternacoes, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 867, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 788, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pesquisarConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(548, 548, 548))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6)))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pesquisarPaciente))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(276, 276, 276)
                                .addComponent(pesquisarInternacoes)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pesquisarConsulta)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pesquisarPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pesquisarPacienteMouseClicked

        String nomeUsuario = JOptionPane.showInputDialog("Digite o nome do usuário: ");
        if(nomeUsuario == null) {
            JOptionPane.showMessageDialog(null, "Operação cancelada!");
            return;
        }

        if(nomeUsuario.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nada foi digitado!");
            return;
        }

        DefaultTableModel modelTabela = (DefaultTableModel) tabelaPacientes.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PACIENTES))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                JOptionPane.showMessageDialog(null, "Não existe nenhum paciente!");
                return;
            } else {
                String[] data = linha.split(",");
                if(data[1].toLowerCase().contains(nomeUsuario.toLowerCase()))  {
                    Object[] dados = {Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3])};
                    modelTabela.addRow(dados);
                }
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(data[1].toLowerCase().contains(nomeUsuario.toLowerCase()))  {
                    Object[] dados = {Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3])};
                    modelTabela.addRow(dados);
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na pesquisa dos pacientes!");
        }
    }//GEN-LAST:event_pesquisarPacienteMouseClicked

    private void tabelaPacientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaPacientesMouseClicked
        id = Integer.parseInt(tabelaPacientes.getValueAt(tabelaPacientes.getSelectedRow(), 0).toString());
        cpf = tabelaPacientes.getValueAt(tabelaPacientes.getSelectedRow(), 2).toString();

        this.criarTabelaConsultas();
        this.criarTabelaInternacoes();
    }//GEN-LAST:event_tabelaPacientesMouseClicked

    private void pesquisarInternacoesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pesquisarInternacoesMouseClicked
        String nomeUsuario = JOptionPane.showInputDialog("Digite o nome do médico: ");
        if(nomeUsuario == null) {
            JOptionPane.showMessageDialog(null, "Operação cancelada!");
            return;
        }

        if(nomeUsuario.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nada foi digitado!");
            return;
        }

        DefaultTableModel modelTabela = (DefaultTableModel) tabelaInternacoes.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_INTERNACOES))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                JOptionPane.showMessageDialog(null, "Não existe nenhuma consulta!");
                return;
            } else {
                String[] data = linha.split(",");
                if(ca.retornaNomeMedico(Integer.parseInt(data[2])).toLowerCase().contains(nomeUsuario.toLowerCase()) && Objects.equals(data[5], "Finalizada"))  {
                    Object[] dados = { data[0], ca.retornaNomeMedico(Integer.parseInt(data[2])), ca.retornaNomePaciente(Integer.parseInt(data[1])), data[3], data[4], data[5], Double.parseDouble(data[6]), data[7]};
                    modelTabela.addRow(dados);
                }
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(ca.retornaNomeMedico(Integer.parseInt(data[2])).toLowerCase().contains(nomeUsuario.toLowerCase()) && Objects.equals(data[5], "Finalizada"))  {
                    Object[] dados = { data[0], ca.retornaNomeMedico(Integer.parseInt(data[2])), ca.retornaNomePaciente(Integer.parseInt(data[1])), data[3], data[4], data[5], Double.parseDouble(data[6]), data[7]};
                    modelTabela.addRow(dados);
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na pesquisa dos pacientes!");
        }
    }//GEN-LAST:event_pesquisarInternacoesMouseClicked

    private void pesquisarConsultaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pesquisarConsultaMouseClicked
        String nomeUsuario = JOptionPane.showInputDialog("Digite o nome do médico: ");
        if(nomeUsuario == null) {
            JOptionPane.showMessageDialog(null, "Operação cancelada!");
            return;
        }

        if(nomeUsuario.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nada foi digitado!");
            return;
        }

        DefaultTableModel modelTabela = (DefaultTableModel) tabelaConsultas.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_CONSULTAS))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                JOptionPane.showMessageDialog(null, "Não existe nenhuma consulta!");
                return;
            } else {
                String[] data = linha.split(",");
                if(ca.retornaNomeMedico(Integer.parseInt(data[2])).toLowerCase().contains(nomeUsuario.toLowerCase()) && Objects.equals(data[5], "Concluída"))  {
                    Object[] dados = { data[0], ca.retornaNomeMedico(Integer.parseInt(data[2])), ca.retornaNomePaciente(Integer.parseInt(data[1])), data[3], data[4], data[5], Double.parseDouble(data[6])};
                    modelTabela.addRow(dados);
                }
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(ca.retornaNomeMedico(Integer.parseInt(data[2])).toLowerCase().contains(nomeUsuario.toLowerCase()) && Objects.equals(data[5], "Concluída")) {
                    Object[] dados = {data[0], ca.retornaNomeMedico(Integer.parseInt(data[2])), ca.retornaNomePaciente(Integer.parseInt(data[1])), data[3], data[4], data[5], Double.parseDouble(data[6])};
                    modelTabela.addRow(dados);
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na pesquisa dos pacientes!");
        }
    }//GEN-LAST:event_pesquisarConsultaMouseClicked

    private void tabelaPacientesAncestorAdded(javax.swing.event.AncestorEvent evt) {
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaPacientes.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PACIENTES))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                return;
            } else {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3]) };
                modelTabela.addRow(dados);
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3]) };
                modelTabela.addRow(dados);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática dos IDs");
        }
    }

    private void criarTabelaConsultas() {
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaConsultas.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_CONSULTAS))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");

                if(Objects.equals(data[5], "Concluída") && Integer.parseInt(data[1]) == id) {
                    Object[] dados = { data[0], ca.retornaNomeMedico(Integer.parseInt(data[2])), ca.retornaNomePaciente(Integer.parseInt(data[1])), data[3], data[4], data[5], Double.parseDouble(data[6])};
                    modelTabela.addRow(dados);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na criação automática da lista de consultas");
        }
    }

    private void criarTabelaInternacoes() {
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaInternacoes.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_INTERNACOES))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");

                if(Objects.equals(data[5], "Finalizada") && Integer.parseInt(data[1]) == id) {
                    Object[] dados = { data[0], ca.retornaNomeMedico(Integer.parseInt(data[2])), ca.retornaNomePaciente(Integer.parseInt(data[1])), data[3], data[4], data[5], Double.parseDouble(data[6]), data[7]};
                    modelTabela.addRow(dados);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na criação automática da lista de internações");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel pesquisarConsulta;
    private javax.swing.JLabel pesquisarInternacoes;
    private javax.swing.JLabel pesquisarPaciente;
    private javax.swing.JTable tabelaConsultas;
    private javax.swing.JTable tabelaInternacoes;
    private javax.swing.JTable tabelaPacientes;
    // End of variables declaration//GEN-END:variables
}
