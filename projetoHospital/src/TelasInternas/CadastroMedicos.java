 /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package TelasInternas;

import Controllers.Medicos;
import Controllers.Pacientes;
import Modulos.IdAutomatico;
import Modulos.Validator;

import java.io.*;

import java.util.ArrayList;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.util.Arrays;

public class CadastroMedicos extends javax.swing.JInternalFrame {

    private static final String FILE_PATH_MEDICOS = "data/medicos.csv";
    private static final String FILE_PATH_CONSULTAS = "data/consultas.csv";
    private static final String FILE_PATH_INTERNACOES = "data/internacoes.csv";


    private ArrayList<String> listaHorarios = new ArrayList<>();

    private String linhaHorario;

    Validator validator = new Validator();

    int id = -1;

    String crm;

    String cpf;

    public CadastroMedicos() {
        initComponents();
        tabelaMedicos.getTableHeader().setReorderingAllowed(false);
        tabelaHorarios.getTableHeader().setReorderingAllowed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nomeTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cpfTxt = new javax.swing.JTextField();
        enviarMedico = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaMedicos = new javax.swing.JTable();
        editarMedico = new javax.swing.JLabel();
        removerMedico = new javax.swing.JLabel();
        pesquisarMedico = new javax.swing.JLabel();
        crmTxt = new javax.swing.JTextField();
        Crm = new javax.swing.JLabel();
        Crm1 = new javax.swing.JLabel();
        especialidades = new javax.swing.JComboBox<>();
        Crm2 = new javax.swing.JLabel();
        agendaTxt = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaHorarios = new javax.swing.JTable();
        reiniciarTabelaMedicos = new javax.swing.JLabel();
        enviarHorario = new javax.swing.JLabel();
        Crm3 = new javax.swing.JLabel();
        Crm4 = new javax.swing.JLabel();
        custoConsultaTxt = new javax.swing.JTextField();
        Crm5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Calibri Light", 0, 36)); // NOI18N
        jLabel1.setText("Cadastro de Médicos");

        jLabel3.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel3.setText("Nome");

        nomeTxt.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        nomeTxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel4.setText("Cadastro de Pessoa Física");

        cpfTxt.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        cpfTxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        enviarMedico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/person_add_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        enviarMedico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enviarMedicoMouseClicked(evt);
            }
        });

        tabelaMedicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Cpf", "Crm", "Custo da Consulta", "Especialidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaMedicos.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tabelaMedicosAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tabelaMedicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMedicosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaMedicos);
        if (tabelaMedicos.getColumnModel().getColumnCount() > 0) {
            tabelaMedicos.getColumnModel().getColumn(0).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(1).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(2).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(3).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(4).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(5).setResizable(false);
        }

        editarMedico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/edit_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        editarMedico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editarMedicoMouseClicked(evt);
            }
        });

        removerMedico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/person_off_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        removerMedico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removerMedicoMouseClicked(evt);
            }
        });

        pesquisarMedico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/search_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        pesquisarMedico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pesquisarMedicoMouseClicked(evt);
            }
        });

        crmTxt.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        crmTxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Crm.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        Crm.setText("Conselho Regional de Medicina");

        Crm1.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        Crm1.setText("Especialidade");

        especialidades.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Cardiologia", "Pediatria", "Ortopedia", "Dermatologia", "Neurologia", "Oftalmologia", "Otorrinolaringologia", "Ginecologia", "Obstetrícia", "Urologia", "Oncologia", "Endocrinologia", "Reumatologia", "Psiquiatria", "Nefrologia", "Hematologia", "Gastroenterologia", "Pneumologia", "Cirurgia Geral", "Cirurgia Plástica", "Anestesiologia", "Infectologia", "Nutrologia", "Geriatria" }));

        Crm2.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        Crm2.setText("Agenda de Horários");

        agendaTxt.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        agendaTxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tabelaHorarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dia", "Hora"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaHorarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaHorariosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabelaHorarios);
        if (tabelaHorarios.getColumnModel().getColumnCount() > 0) {
            tabelaHorarios.getColumnModel().getColumn(0).setResizable(false);
            tabelaHorarios.getColumnModel().getColumn(1).setResizable(false);
        }

        reiniciarTabelaMedicos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/refresh_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        reiniciarTabelaMedicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reiniciarTabelaMedicosMouseClicked(evt);
            }
        });

        enviarHorario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/add_28dp_000000_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        enviarHorario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enviarHorarioMouseClicked(evt);
            }
        });

        Crm3.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        Crm3.setText("Deve ser inserido no formato \"25/10/04-01:30\", ou seja, a data seguida das horas separadas pelo símbolo de subtração.");

        Crm4.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        Crm4.setText("Deve ser inserido no formato \"0000000-0/BR\", ou seja, oito digitos e o estado separado por uma barra.");

        custoConsultaTxt.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        custoConsultaTxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Crm5.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        Crm5.setText("Custo da Consulta");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(408, 408, 408))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(enviarMedico)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(removerMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24))
                            .addComponent(nomeTxt)
                            .addComponent(cpfTxt)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(crmTxt)
                            .addComponent(custoConsultaTxt)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(295, 295, 295)
                                        .addComponent(editarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(Crm, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Crm4)
                                    .addComponent(especialidades, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Crm1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(agendaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(enviarHorario))
                                    .addComponent(Crm2, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Crm3)
                                    .addComponent(Crm5, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pesquisarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(reiniciarTabelaMedicos, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nomeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cpfTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Crm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(crmTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Crm4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Crm5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(custoConsultaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Crm1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(especialidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Crm2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(agendaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Crm3))
                            .addComponent(enviarHorario))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pesquisarMedico)
                            .addComponent(reiniciarTabelaMedicos))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editarMedico)
                    .addComponent(removerMedico)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(enviarMedico)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editarMedicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editarMedicoMouseClicked
        if(id == -1) {
            JOptionPane.showMessageDialog(null, "Nenhum Médico foi selecionado!");
            return;
        }

        if(!validator.isString(nomeTxt.getText(), "nome")) return;
        if(!validator.verificarNome(nomeTxt.getText())) return;
        if(!validator.isNumeroInteiro(cpfTxt.getText(), "cpf")) return;
        if(!validator.verificarCPF(cpfTxt.getText())) return;
        if(!Objects.equals(cpfTxt.getText(), cpf)) {
            if(!validator.verificarCpfDuplicado(cpfTxt.getText(), FILE_PATH_MEDICOS)) return;
        }
        if(!validator.verificarCrm(crmTxt.getText())) return;
        if(!Objects.equals(crmTxt.getText(), crm)) {
            if(!this.verificarCrmDuplicado(crmTxt.getText(), FILE_PATH_MEDICOS)) return;
        }
        if(!validator.isNumero(custoConsultaTxt.getText(), "custo da consulta")) return;
        if(!validator.verificarCheckBox((String) especialidades.getSelectedItem(), "especialidade")) return;

        String horariosEmLinha = String.join(";", listaHorarios);

        List<String> linhas = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_MEDICOS))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(Integer.parseInt(data[0]) == id) {
                    data[1] = nomeTxt.getText();
                    data[2] = cpfTxt.getText();
                    data[3] = crmTxt.getText();
                    data[4] = (String) especialidades.getSelectedItem();
                    data[5] = custoConsultaTxt.getText();
                    String[] horarios = data[6].split(";");
                    if(linhaHorario != null) {

                        for (String h : horarios) {
                            if (h.trim().equalsIgnoreCase(agendaTxt.getText())) {
                                JOptionPane.showMessageDialog(null, "Este horário já existe na agenda deste médico!");
                                return;
                            }
                        }

                        for (int i = 0; i < horarios.length; i++) {
                            if (horarios[i].equals(linhaHorario)) {
                                horarios[i] = agendaTxt.getText();
                            }
                        }

                        data[6] = String.join(";", horarios);
                    }

                    if(!horariosEmLinha.isEmpty()) {
                        data[6] = data[6] + ";" + horariosEmLinha;
                    }

                    linha = String.join(",", data);
                }
                linhas.add(linha);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na edição dos médicos!");
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_MEDICOS))) {
            for (String l : linhas) {
                writer.write(l);
                writer.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar alterações no CSV!");
        }

        JOptionPane.showMessageDialog(null, "Médico editado com sucesso!");

        this.setNulo();
    }//GEN-LAST:event_editarMedicoMouseClicked

    private void removerMedicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removerMedicoMouseClicked
        if(id == -1) {
            JOptionPane.showMessageDialog(null, "Nenhum paciente foi selecionado!");
            return;
        }

        List<String> linhas = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_MEDICOS))) {
            String linha;
            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                int idAtual = Integer.parseInt(data[0]);

                if (id != idAtual) {
                    linhas.add(linha);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_MEDICOS))) {
            for (String l : linhas) {
                writer.write(l);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        JOptionPane.showMessageDialog(null, "Médico removido com sucesso!");

        //remove as associações do banco de dados para não haver erro lógico

        this.removerConsultas();

        this.removerInternacoes();

        this.setNulo();
    }//GEN-LAST:event_removerMedicoMouseClicked

    private void pesquisarMedicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pesquisarMedicoMouseClicked
        reiniciarTabelaMedicos();

        String nomeUsuario = JOptionPane.showInputDialog("Digite o nome do usuário: ");
        if(nomeUsuario == null) {
            JOptionPane.showMessageDialog(null, "Operação cancelada!");
            return;
        }

        if(nomeUsuario.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nada foi digitado!");
            return;
        }

        DefaultTableModel modelTabela = (DefaultTableModel) tabelaMedicos.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_MEDICOS))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                JOptionPane.showMessageDialog(null, "Não existe nenhum paciente!");
                return;
            } else {
                String[] data = linha.split(",");
                if(data[1].toLowerCase().contains(nomeUsuario.toLowerCase()))  {
                    Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], data[3], Float.parseFloat(data[5]), data[4] };
                    modelTabela.addRow(dados);
                }
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(data[1].toLowerCase().contains(nomeUsuario.toLowerCase()))  {
                    Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], data[3], Float.parseFloat(data[5]), data[4] };
                    modelTabela.addRow(dados);
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na pesquisa dos pacientes!");
        }
    }//GEN-LAST:event_pesquisarMedicoMouseClicked

    //Ao clicar em alguma coluna desta tabela ela lista automaticamente os horarios do médico selecionado e seta as variaveis globais da classe atual

    private void tabelaMedicosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMedicosMouseClicked
        id = Integer.parseInt(tabelaMedicos.getValueAt(tabelaMedicos.getSelectedRow(), 0).toString());
        nomeTxt.setText(tabelaMedicos.getValueAt(tabelaMedicos.getSelectedRow(), 1).toString());
        cpfTxt.setText(tabelaMedicos.getValueAt(tabelaMedicos.getSelectedRow(), 2).toString());
        crmTxt.setText(tabelaMedicos.getValueAt(tabelaMedicos.getSelectedRow(), 3).toString());
        custoConsultaTxt.setText(tabelaMedicos.getValueAt(tabelaMedicos.getSelectedRow(), 4).toString());
        especialidades.setSelectedItem(tabelaMedicos.getValueAt(tabelaMedicos.getSelectedRow(), 5).toString());
        cpf = tabelaMedicos.getValueAt(tabelaMedicos.getSelectedRow(), 2).toString();
        crm = tabelaMedicos.getValueAt(tabelaMedicos.getSelectedRow(), 3).toString();

        DefaultTableModel modelTabela = (DefaultTableModel) tabelaHorarios.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_MEDICOS))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(Integer.parseInt(data[0]) == id)  {
                    String[] horario = data[6].split(";");
                    for (String s : horario) {
                        String[] dataHora = s.split("-");
                        // Data e Hora
                        Object[] dados = {dataHora[0], dataHora[1]};
                        modelTabela.addRow(dados);
                    }
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática das datas.");
        }
    }//GEN-LAST:event_tabelaMedicosMouseClicked

    private void reiniciarTabelaMedicosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reiniciarTabelaMedicosMouseClicked
        reiniciarTabelaMedicos();
    }//GEN-LAST:event_reiniciarTabelaMedicosMouseClicked

    private void enviarHorarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enviarHorarioMouseClicked
        if(!validator.verificarHorario(agendaTxt.getText())) return;
        if(!validator.verificarHorarioDuplicado(agendaTxt.getText(), listaHorarios)) return;
        linhaHorario = null;

        listaHorarios.add(agendaTxt.getText());
        JOptionPane.showMessageDialog(null, "Horario " + agendaTxt.getText() + " Adicionado!");
        agendaTxt.setText("");
    }//GEN-LAST:event_enviarHorarioMouseClicked

    private void tabelaHorariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaHorariosMouseClicked
        agendaTxt.setText(tabelaHorarios.getValueAt(tabelaHorarios.getSelectedRow(), 0).toString() + "-" + tabelaHorarios.getValueAt(tabelaHorarios.getSelectedRow(), 1).toString());
        linhaHorario = tabelaHorarios.getValueAt(tabelaHorarios.getSelectedRow(), 0).toString() + "-" + tabelaHorarios.getValueAt(tabelaHorarios.getSelectedRow(), 1).toString();
    }//GEN-LAST:event_tabelaHorariosMouseClicked

    private void tabelaMedicosAncestorAdded(javax.swing.event.AncestorEvent evt) {
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaMedicos.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_MEDICOS))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                return;
            } else {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], data[3], Float.parseFloat(data[5]), data[4]};
                modelTabela.addRow(dados);
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], data[3], Float.parseFloat(data[5]), data[4]};
                modelTabela.addRow(dados);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática dos IDs");
        }
    }


    private void enviarMedicoMouseClicked(java.awt.event.MouseEvent evt) {
        if(!validator.isString(nomeTxt.getText(), "nome")) return;
        if(!validator.verificarNome(nomeTxt.getText())) return;
        if(!validator.isNumeroInteiro(cpfTxt.getText(), "cpf")) return;
        if(!validator.verificarCpfDuplicado(cpfTxt.getText(), FILE_PATH_MEDICOS)) return;
        if(!validator.verificarCPF(cpfTxt.getText())) return;
        if(!validator.verificarCrm(crmTxt.getText())) return;
        if(!this.verificarCrmDuplicado(crmTxt.getText(), FILE_PATH_MEDICOS)) return;
        if(!validator.isNumero(custoConsultaTxt.getText(), "custo da consulta")) return;
        if(!validator.verificarCheckBox((String) especialidades.getSelectedItem(), "especialidade")) return;
        if(listaHorarios.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nenhuma data foi inserida para atendimento do médico! Operação cancelada!");
            return;
        }

        String horariosEmLinha = String.join(";", listaHorarios);
        Medicos m1 = new Medicos(nomeTxt.getText(), cpfTxt.getText(), IdAutomatico.criarIdAutomatico(0, FILE_PATH_MEDICOS), crmTxt.getText(), (String) especialidades.getSelectedItem(), Float.parseFloat(custoConsultaTxt.getText()), horariosEmLinha);

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_MEDICOS, true))) {
            writer.write(m1.toCSV());
            writer.newLine();
            JOptionPane.showMessageDialog(null, "Médico criado com sucesso!");
        } catch(IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na criação do médico, por favor reinicie a aplicação.");
        }

        this.setNulo();
    }

    private void reiniciarTabelaMedicos() {
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaMedicos.getModel();
        DefaultTableModel modelTabelaHorarios = (DefaultTableModel) tabelaHorarios.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_MEDICOS))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                return;
            } else {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], data[3], Float.parseFloat(data[5]), data[4]};
                modelTabela.addRow(dados);
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], data[3], Float.parseFloat(data[5]), data[4]};
                modelTabela.addRow(dados);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática dos IDs");
        }

        this.setNulo();
        modelTabelaHorarios.setNumRows(0);

    }

    private boolean verificarCrmDuplicado(String crmNovo, String filePath) {
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String linha;
            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");

                if (data[3].equals(crmNovo)) {
                    JOptionPane.showMessageDialog(null, "Este Crm já está cadastrado!");
                    return false;
                }

            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao verificar Crm duplicado!");
        }
        return true;
    }

    private void removerConsultas() {
        List<String> linhasConsultas = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_CONSULTAS))) {
            String linha;
            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                int idAtual = Integer.parseInt(data[2]);

                if (id != idAtual) {
                    linhasConsultas.add(linha);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_CONSULTAS))) {
            for (String l : linhasConsultas) {
                writer.write(l);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        JOptionPane.showMessageDialog(null, "Consultas removidas com sucesso!");
    }

    private void removerInternacoes() {
        List<String> linhasInternacoes = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_INTERNACOES))) {
            String linha;
            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                int idAtual = Integer.parseInt(data[2]);

                if (id != idAtual) {
                    linhasInternacoes.add(linha);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_INTERNACOES))) {
            for (String l : linhasInternacoes) {
                writer.write(l);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        JOptionPane.showMessageDialog(null, "Internações removidas com sucesso!");
    }

    private void setNulo() {
        id = -1;
        nomeTxt.setText("");
        cpfTxt.setText("");
        crmTxt.setText("");
        custoConsultaTxt.setText("");
        especialidades.setSelectedIndex(0);
        agendaTxt.setText("");
        listaHorarios = new ArrayList<>();
        cpf = "";
        crm = "";
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Crm;
    private javax.swing.JLabel Crm1;
    private javax.swing.JLabel Crm2;
    private javax.swing.JLabel Crm3;
    private javax.swing.JLabel Crm4;
    private javax.swing.JLabel Crm5;
    private javax.swing.JTextField agendaTxt;
    private javax.swing.JTextField cpfTxt;
    private javax.swing.JTextField crmTxt;
    private javax.swing.JTextField custoConsultaTxt;
    private javax.swing.JLabel editarMedico;
    private javax.swing.JLabel enviarHorario;
    private javax.swing.JLabel enviarMedico;
    private javax.swing.JComboBox<String> especialidades;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nomeTxt;
    private javax.swing.JLabel pesquisarMedico;
    private javax.swing.JLabel reiniciarTabelaMedicos;
    private javax.swing.JLabel removerMedico;
    private javax.swing.JTable tabelaHorarios;
    private javax.swing.JTable tabelaMedicos;
    // End of variables declaration//GEN-END:variables
}
