/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package TelasInternas;

import Controllers.Consultas;
import Controllers.Pacientes;
import Modulos.IdAutomatico;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import java.util.Objects;

/**
 *
 * @author tung tung tung sahur
 */
public class AgendamentoConsultas extends javax.swing.JInternalFrame {

    private static final String FILE_PATH_MEDICOS = "data/medicos.csv";
    private static final String FILE_PATH_PLANOS = "data/planosDeSaude.csv";
    private static final String FILE_PATH_PACIENTES = "data/pacientes.csv";
    private static final String FILE_PATH_SALAS = "data/salasConsultas.csv";
    private static final String FILE_PATH_CONSULTAS = "data/consultas.csv";

    private Integer idPaciente;
    private Integer idMedico;
    private String sala;
    private String linhaHorario;
    private Double custoConsulta;

    /**
     * Creates new form AgendamentoConsultas
     */
    public AgendamentoConsultas() {
        initComponents();
        tabelaPacientes.getTableHeader().setReorderingAllowed(false);
        tabelaSalas.getTableHeader().setReorderingAllowed(false);
        tabelaHorarios.getTableHeader().setReorderingAllowed(false);
        tabelaMedicos.getTableHeader().setReorderingAllowed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaPacientes = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaMedicos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaHorarios = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaSalas = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        agendarConsultaBotao = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Calibri Light", 0, 36)); // NOI18N
        jLabel1.setText("Agendamento de Consultas");

        jLabel3.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel3.setText("Pacientes");

        jLabel4.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel4.setText("Médicos");

        jLabel5.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel5.setText("Horários Disponíveis");

        tabelaPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Cpf", "Idade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaPacientes.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tabelaPacientesAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tabelaPacientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaPacientesMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tabelaPacientes);
        if (tabelaPacientes.getColumnModel().getColumnCount() > 0) {
            tabelaPacientes.getColumnModel().getColumn(0).setResizable(false);
            tabelaPacientes.getColumnModel().getColumn(1).setResizable(false);
            tabelaPacientes.getColumnModel().getColumn(2).setResizable(false);
            tabelaPacientes.getColumnModel().getColumn(3).setResizable(false);
        }

        tabelaMedicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Cpf", "Crm", "Custo da Consulta", "Especialidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaMedicos.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tabelaMedicosAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tabelaMedicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMedicosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaMedicos);
        if (tabelaMedicos.getColumnModel().getColumnCount() > 0) {
            tabelaMedicos.getColumnModel().getColumn(0).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(1).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(2).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(3).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(4).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(5).setResizable(false);
        }

        tabelaHorarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dia", "Hora"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaHorarios.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tabelaHorariosAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tabelaHorarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaHorariosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabelaHorarios);
        if (tabelaHorarios.getColumnModel().getColumnCount() > 0) {
            tabelaHorarios.getColumnModel().getColumn(0).setResizable(false);
            tabelaHorarios.getColumnModel().getColumn(1).setResizable(false);
        }

        tabelaSalas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sala"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaSalas.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tabelaSalasAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tabelaSalas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaSalasMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tabelaSalas);
        if (tabelaSalas.getColumnModel().getColumnCount() > 0) {
            tabelaSalas.getColumnModel().getColumn(0).setResizable(false);
        }

        jLabel6.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel6.setText("Salas Disponíveis");

        agendarConsultaBotao.setBackground(new java.awt.Color(204, 204, 204));
        agendarConsultaBotao.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        agendarConsultaBotao.setText("Agendar Consulta");
        agendarConsultaBotao.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        agendarConsultaBotao.setContentAreaFilled(false);
        agendarConsultaBotao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                agendarConsultaBotaoMouseClicked(evt);
            }
        });
        agendarConsultaBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agendarConsultaBotaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4)
                        .addGap(154, 154, 154)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(317, 317, 317)
                        .addComponent(jLabel4)
                        .addGap(258, 258, 258))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(207, 207, 207))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addComponent(jScrollPane2)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(382, 382, 382)
                        .addComponent(agendarConsultaBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(394, 394, 394)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(agendarConsultaBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Ao iniciar o programa, a tabela pacientes é preenchida automaticamente
    private void tabelaPacientesAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tabelaPacientesAncestorAdded
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaPacientes.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PACIENTES))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                return;
            } else {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3]) };
                modelTabela.addRow(dados);
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3]) };
                modelTabela.addRow(dados);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática dos IDs");
        }
    }//GEN-LAST:event_tabelaPacientesAncestorAdded
    //Ao iniciar o programa, a tabela medicos é preenchida automaticamente
    private void tabelaMedicosAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tabelaMedicosAncestorAdded
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaMedicos.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_MEDICOS))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                return;
            } else {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], data[3], Float.parseFloat(data[5]), data[4]};
                modelTabela.addRow(dados);
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], data[3], Float.parseFloat(data[5]), data[4]};
                modelTabela.addRow(dados);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática dos IDs");
        }
    }//GEN-LAST:event_tabelaMedicosAncestorAdded

    //Ao iniciar o programa, a tabela salas é preenchida automaticamente
    private void tabelaSalasAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tabelaSalasAncestorAdded
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaSalas.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_SALAS))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                return;
            } else {
                String[] data = linha.split(",");
                Object[] dados = {data[0]};
                modelTabela.addRow(dados);
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                Object[] dados = {data[0]};
                modelTabela.addRow(dados);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática das salas");
        }
    }//GEN-LAST:event_tabelaSalasAncestorAdded


    private void tabelaHorariosAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tabelaHorariosAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_tabelaHorariosAncestorAdded

    //Nesta função é criada a tabela horarios e setadas as variaveis idMedico e custoConsulta de acordo com os dados da coluna selecionada
    private void tabelaMedicosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMedicosMouseClicked
        idMedico = Integer.parseInt(tabelaMedicos.getValueAt(tabelaMedicos.getSelectedRow(), 0).toString());
        custoConsulta = Double.parseDouble(tabelaMedicos.getValueAt(tabelaMedicos.getSelectedRow(), 4).toString());
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaHorarios.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_MEDICOS))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(Integer.parseInt(data[0]) == idMedico)  {
                    String[] horario = data[6].split(";");
                    for (String s : horario) {
                        String[] dataHora = s.split("-");
                        // Data e Hora
                        Object[] dados = {dataHora[0], dataHora[1]};
                        modelTabela.addRow(dados);
                    }
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática das datas.");
        }
    }//GEN-LAST:event_tabelaMedicosMouseClicked

    //Aqui é setado o id do paciente ao clicar em certa coluna da tabela
    private void tabelaPacientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaPacientesMouseClicked
        idPaciente = Integer.parseInt(tabelaPacientes.getValueAt(tabelaPacientes.getSelectedRow(), 0).toString());
    }//GEN-LAST:event_tabelaPacientesMouseClicked

    //Aqui é setado a variavel sala de acordo com a coluna clicada na tabela
    private void tabelaSalasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaSalasMouseClicked
        sala = tabelaSalas.getValueAt(tabelaSalas.getSelectedRow(), 0).toString();
    }//GEN-LAST:event_tabelaSalasMouseClicked

    //Aqui é setado a variavel linhaHorario de acordo com o horario selecionado na tabela
    private void tabelaHorariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaHorariosMouseClicked
        linhaHorario = tabelaHorarios.getValueAt(tabelaHorarios.getSelectedRow(), 0).toString() + "-" + tabelaHorarios.getValueAt(tabelaHorarios.getSelectedRow(), 1).toString();
    }//GEN-LAST:event_tabelaHorariosMouseClicked

    //Aqui é feita a criação da consulta
    private void agendarConsultaBotaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agendarConsultaBotaoMouseClicked
        if(idPaciente == null) {
            JOptionPane.showMessageDialog(null, "Você precisa selecionar algum paciente da tabela paciente!");
            return;
        }

        if(idMedico == null) {
            JOptionPane.showMessageDialog(null, "Você precisa selecionar algum médico da tabela médicos!");
            return;
        }

        if(sala == null) {
            JOptionPane.showMessageDialog(null, "Você precisa selecionar alguma sala da tabela!");
            return;
        }

        if(linhaHorario == null) {
            JOptionPane.showMessageDialog(null, "Você precisa selecionar algum horario disponível da tabela horários!");
            return;
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_CONSULTAS))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");

                //Se estiver marcando no mesmo horario com o mesmo médico
                if((idMedico == Integer.parseInt(data[2]) && Objects.equals(linhaHorario, data[3]) && Objects.equals(data[5], "agendada"))) {
                    JOptionPane.showMessageDialog(null, "Uma consulta já foi marcada neste horario com este médico!");
                    return;
                }

                //Se estiver marcando no mesmo horario com a mesma sala
                if((Objects.equals(sala, data[4]) && Objects.equals(linhaHorario, data[3]) && Objects.equals(data[5], "agendada"))) {
                    JOptionPane.showMessageDialog(null, "Uma consulta já foi marcada neste horario com este local!");
                    return;
                }

                //Se estiver marcando no mesmo horario com o mesmo paciente
                if(Objects.equals(linhaHorario, data[3]) && idPaciente == Integer.parseInt(data[1]) && Objects.equals(data[5], "agendada")) {
                    JOptionPane.showMessageDialog(null, "Uma consulta já foi marcada neste horario com outro médico!");
                    return;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na criação automática da consulta");
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PLANOS))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(idPaciente == Integer.parseInt(data[2])) {
                    Double valorConsulta = (1 - Double.parseDouble(data[3])) * custoConsulta;
                    Consultas c = new Consultas(IdAutomatico.criarIdAutomatico(0, FILE_PATH_CONSULTAS), idPaciente, idMedico, linhaHorario, sala, "agendada", valorConsulta);

                    try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_CONSULTAS, true))) {
                        writer.write(c.toCSV());
                        writer.newLine();
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Erro ao salvar a consulta no arquivo CSV!");
                        return;
                    }

                    JOptionPane.showMessageDialog(null, "Consulta criada com sucesso!");
                    return;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na criação automática da consulta");
        }


        Consultas c = new Consultas(IdAutomatico.criarIdAutomatico(0, FILE_PATH_CONSULTAS), idPaciente, idMedico, linhaHorario, sala, "agendada", custoConsulta);

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_CONSULTAS, true))) {
            writer.write(c.toCSV());
            writer.newLine();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar a consulta no arquivo CSV!");
        }

        JOptionPane.showMessageDialog(null, "Consulta criada com sucesso!");

    }//GEN-LAST:event_agendarConsultaBotaoMouseClicked

    private void agendarConsultaBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agendarConsultaBotaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_agendarConsultaBotaoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agendarConsultaBotao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tabelaHorarios;
    private javax.swing.JTable tabelaMedicos;
    private javax.swing.JTable tabelaPacientes;
    private javax.swing.JTable tabelaSalas;
    // End of variables declaration//GEN-END:variables
}
