 /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package TelasInternas;

import Controllers.Pacientes;
import Modulos.IdAutomatico;
import Modulos.Validator;

import java.io.*;

import java.util.ArrayList;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.util.Arrays;

public class CadastroPacientes extends javax.swing.JInternalFrame {

    private static final String FILE_PATH_PACIENTES = "data/pacientes.csv";
    private static final String FILE_PATH_PLANO = "data/planosDeSaude.csv";
    private static final String FILE_PATH_INTERNACOES = "data/internacoes.csv";
    private static final String FILE_PATH_CONSULTAS = "data/consultas.csv";

    Validator validator = new Validator();

    int id = -1;
    String cpf;

    public CadastroPacientes() {
        initComponents();
        tabelaPacientes.getTableHeader().setReorderingAllowed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nomeTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cpfTxt = new javax.swing.JTextField();
        idadeTxt = new javax.swing.JTextField();
        enviarPaciente = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaPacientes = new javax.swing.JTable();
        editarPaciente = new javax.swing.JLabel();
        removerPaciente = new javax.swing.JLabel();
        pesquisarPaciente = new javax.swing.JLabel();
        reiniciarTabela = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Calibri Light", 0, 36)); // NOI18N
        jLabel1.setText("Cadastro de Pacientes");

        jLabel3.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel3.setText("Nome");

        nomeTxt.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        nomeTxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel4.setText("Cadastro de Pessoa FÃ­sica");

        jLabel5.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel5.setText("Idade");

        cpfTxt.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        cpfTxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        idadeTxt.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        idadeTxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        enviarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/person_add_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        enviarPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enviarPacienteMouseClicked(evt);
            }
        });

        tabelaPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Cpf", "Idade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaPacientes.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tabelaPacientesAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tabelaPacientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaPacientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaPacientes);
        if (tabelaPacientes.getColumnModel().getColumnCount() > 0) {
            tabelaPacientes.getColumnModel().getColumn(0).setResizable(false);
            tabelaPacientes.getColumnModel().getColumn(1).setResizable(false);
            tabelaPacientes.getColumnModel().getColumn(2).setResizable(false);
            tabelaPacientes.getColumnModel().getColumn(3).setResizable(false);
        }

        editarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/edit_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        editarPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editarPacienteMouseClicked(evt);
            }
        });

        removerPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/person_off_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        removerPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removerPacienteMouseClicked(evt);
            }
        });

        pesquisarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/search_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        pesquisarPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pesquisarPacienteMouseClicked(evt);
            }
        });

        reiniciarTabela.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/refresh_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        reiniciarTabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reiniciarTabelaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(408, 408, 408))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(idadeTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nomeTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cpfTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(enviarPaciente)
                                        .addGap(211, 211, 211)
                                        .addComponent(editarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(180, 180, 180)
                                        .addComponent(removerPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(24, 24, 24)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pesquisarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(reiniciarTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 694, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nomeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cpfTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(idadeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(enviarPaciente)
                        .addComponent(editarPaciente))
                    .addComponent(removerPaciente)
                    .addComponent(pesquisarPaciente)
                    .addComponent(reiniciarTabela))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editarPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editarPacienteMouseClicked

        if(id == -1) {
            JOptionPane.showMessageDialog(null, "Nenhum paciente foi selecionado!");
            return;
        }

        if(!validator.isString(nomeTxt.getText(), "nome")) return;
        if(!validator.verificarNome(nomeTxt.getText())) return;
        if(!validator.isNumero(cpfTxt.getText(), "cpf")) return;
        if(!validator.verificarCPF(cpfTxt.getText())) return;
        if(!Objects.equals(cpfTxt.getText(), cpf)) {
            if(!validator.verificarCpfDuplicado(cpfTxt.getText(), FILE_PATH_PACIENTES)) return;
        }
        if(!validator.isNumero(idadeTxt.getText(), "idade")) return;
        if(!validator.verificarIdade(idadeTxt.getText())) return;

        List<String> linhas = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PACIENTES))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(Integer.parseInt(data[0]) == id) {
                    data[1] = nomeTxt.getText();
                    data[2] = cpfTxt.getText();
                    data[3] = idadeTxt.getText();
                    linha = String.join(",", data);
                }
                linhas.add(linha);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na ediÃ§Ã£o dos pacientes!");
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_PACIENTES))) {
            for (String l : linhas) {
                writer.write(l);
                writer.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar alteraÃ§Ãµes no CSV!");
        }

        this.setNulo();

        JOptionPane.showMessageDialog(null, "Paciente editado com sucesso!");
    }//GEN-LAST:event_editarPacienteMouseClicked

    private void removerPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removerPacienteMouseClicked
        if(id == -1) {
            JOptionPane.showMessageDialog(null, "Nenhum paciente foi selecionado!");
            return;
        }

        List<String> linhas = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PACIENTES))) {
            String linha;
            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                int idAtual = Integer.parseInt(data[0]);

                if (id != idAtual) {
                    linhas.add(linha);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_PACIENTES))) {
            for (String l : linhas) {
                writer.write(l);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        JOptionPane.showMessageDialog(null, "Paciente removido com sucesso!");

        List<String> linhasPlano = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PLANO))) {
            String linha;
            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                int idAtual = Integer.parseInt(data[2]);

                if (id != idAtual) {
                    linhasPlano.add(linha);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_PLANO))) {
            for (String l : linhasPlano) {
                writer.write(l);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        JOptionPane.showMessageDialog(null, "Plano removido com sucesso!");

        this.removerConsultas();

        this.removerInternacoes();

        this.setNulo();
    }//GEN-LAST:event_removerPacienteMouseClicked

    private void pesquisarPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pesquisarPacienteMouseClicked
        reiniciarTabela();

        String nomeUsuario = JOptionPane.showInputDialog("Digite o nome do usuÃ¡rio: ");
        if(nomeUsuario == null) {
            JOptionPane.showMessageDialog(null, "OperaÃ§Ã£o cancelada!");
            return;
        }

        if(nomeUsuario.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nada foi digitado!");
            return;
        }

        DefaultTableModel modelTabela = (DefaultTableModel) tabelaPacientes.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PACIENTES))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                JOptionPane.showMessageDialog(null, "NÃ£o existe nenhum paciente!");
                return;
            } else {
                String[] data = linha.split(",");
                if(data[1].toLowerCase().contains(nomeUsuario.toLowerCase()))  {
                    Object[] dados = {Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3])};
                    modelTabela.addRow(dados);
                }
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(data[1].toLowerCase().contains(nomeUsuario.toLowerCase()))  {
                    Object[] dados = {Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3])};
                    modelTabela.addRow(dados);
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na pesquisa dos pacientes!");
        }
    }//GEN-LAST:event_pesquisarPacienteMouseClicked

    private void reiniciarTabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reiniciarTabelaMouseClicked
        reiniciarTabela();
    }//GEN-LAST:event_reiniciarTabelaMouseClicked

    private void tabelaPacientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaPacientesMouseClicked
        id = Integer.parseInt(tabelaPacientes.getValueAt(tabelaPacientes.getSelectedRow(), 0).toString());
        nomeTxt.setText(tabelaPacientes.getValueAt(tabelaPacientes.getSelectedRow(), 1).toString());
        cpfTxt.setText(tabelaPacientes.getValueAt(tabelaPacientes.getSelectedRow(), 2).toString());
        cpf = tabelaPacientes.getValueAt(tabelaPacientes.getSelectedRow(), 2).toString();
        idadeTxt.setText(tabelaPacientes.getValueAt(tabelaPacientes.getSelectedRow(), 3).toString());
    }//GEN-LAST:event_tabelaPacientesMouseClicked

    private void tabelaPacientesAncestorAdded(javax.swing.event.AncestorEvent evt) {
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaPacientes.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PACIENTES))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                return;
            } else {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3]) };
                modelTabela.addRow(dados);
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3]) };
                modelTabela.addRow(dados);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automÃ¡tica dos IDs");
        }
    }


    private void enviarPacienteMouseClicked(java.awt.event.MouseEvent evt) {
        if(!validator.isString(nomeTxt.getText(), "nome")) return;
        if(!validator.verificarNome(nomeTxt.getText())) return;
        if(!validator.isNumero(cpfTxt.getText(), "cpf")) return;
        if(!validator.verificarCpfDuplicado(cpfTxt.getText(), FILE_PATH_PACIENTES)) return;
        if(!validator.verificarCPF(cpfTxt.getText())) return;
        if(!validator.isNumero(idadeTxt.getText(), "idade")) return;
        if(!validator.verificarIdade(idadeTxt.getText())) return;

        Pacientes p1 = new Pacientes(nomeTxt.getText(), cpfTxt.getText(), IdAutomatico.criarIdAutomatico(0, FILE_PATH_PACIENTES), Integer.parseInt(idadeTxt.getText()));

        criarPastaSeNaoExistir();

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_PACIENTES, true))) {
            writer.write(p1.toCSV());
            writer.newLine();
            JOptionPane.showMessageDialog(null, "Paciente criado com sucesso!");

        } catch(IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na criaÃ§Ã£o do paciente, por favor feche e abra a aplicaÃ§Ã£o.");
        }

        this.setNulo();
    }

    private static void criarPastaSeNaoExistir() {
        File pasta = new File("data");
        if (!pasta.exists()) {
            pasta.mkdir();
        }
    }

    private void reiniciarTabela() {
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaPacientes.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PACIENTES))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                return;
            } else {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3]) };
                modelTabela.addRow(dados);
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3]) };
                modelTabela.addRow(dados);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automÃ¡tica dos IDs");
        }

        this.setNulo();
    }

    private void removerConsultas() {
        List<String> linhasConsultas = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_CONSULTAS))) {
            String linha;
            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                int idAtual = Integer.parseInt(data[1]);

                if (id != idAtual) {
                    linhasConsultas.add(linha);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_CONSULTAS))) {
            for (String l : linhasConsultas) {
                writer.write(l);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        JOptionPane.showMessageDialog(null, "Consultas removidas com sucesso!");
    }

    private void removerInternacoes() {
        List<String> linhasInternacoes = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_INTERNACOES))) {
            String linha;
            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                int idAtual = Integer.parseInt(data[1]);

                if (id != idAtual) {
                    linhasInternacoes.add(linha);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_INTERNACOES))) {
            for (String l : linhasInternacoes) {
                writer.write(l);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        JOptionPane.showMessageDialog(null, "InternaÃ§Ãµes removidas com sucesso!");
    }

    private void setNulo() {
        nomeTxt.setText("");
        cpfTxt.setText("");
        idadeTxt.setText("");
        id = -1;
        cpf = "";
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cpfTxt;
    private javax.swing.JLabel editarPaciente;
    private javax.swing.JLabel enviarPaciente;
    private javax.swing.JTextField idadeTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nomeTxt;
    private javax.swing.JLabel pesquisarPaciente;
    private javax.swing.JLabel reiniciarTabela;
    private javax.swing.JLabel removerPaciente;
    private javax.swing.JTable tabelaPacientes;
    // End of variables declaration//GEN-END:variables
}
