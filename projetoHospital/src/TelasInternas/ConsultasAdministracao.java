/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package TelasInternas;

import Controllers.Consultas;
import Controllers.Pacientes;
import Modulos.IdAutomatico;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 *
 * @author tung tung tung sahur
 */
public class ConsultasAdministracao extends javax.swing.JInternalFrame {

    private static final String FILE_PATH_MEDICOS = "data/medicos.csv";
    private static final String FILE_PATH_PLANOS = "data/planosDeSaude.csv";
    private static final String FILE_PATH_PACIENTES = "data/pacientes.csv";
    private static final String FILE_PATH_SALAS = "data/salasConsultas.csv";
    private static final String FILE_PATH_CONSULTAS = "data/consultas.csv";
    private static final String FILE_PATH_DIAGNOSTICOS = "data/diagnosticos/";


    private Integer id = -1;
    private String linhaHorario;
    private String nomeUsuario;

    /**
     * Creates new form AgendamentoConsultas
     */
    public ConsultasAdministracao() {
        initComponents();
        tabelaConsultas.getTableHeader().setReorderingAllowed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        excluirConsulta = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabelaConsultas = new javax.swing.JTable();
        finalizarConsulta = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Calibri Light", 0, 36)); // NOI18N
        jLabel1.setText("Administração das Consultas");

        jLabel5.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel5.setText("Tabela Consultas");

        excluirConsulta.setBackground(new java.awt.Color(204, 204, 204));
        excluirConsulta.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        excluirConsulta.setText("Excluir Consulta");
        excluirConsulta.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        excluirConsulta.setContentAreaFilled(false);
        excluirConsulta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                excluirConsultaMouseClicked(evt);
            }
        });

        tabelaConsultas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Nome do Médico", "Nome do Paciente", "Horario da Consulta", "Sala da Consulta", "Situação", "Custo da Consulta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaConsultas.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tabelaConsultasAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tabelaConsultas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaConsultasMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tabelaConsultas);
        if (tabelaConsultas.getColumnModel().getColumnCount() > 0) {
            tabelaConsultas.getColumnModel().getColumn(0).setResizable(false);
            tabelaConsultas.getColumnModel().getColumn(1).setResizable(false);
            tabelaConsultas.getColumnModel().getColumn(2).setResizable(false);
            tabelaConsultas.getColumnModel().getColumn(3).setResizable(false);
            tabelaConsultas.getColumnModel().getColumn(4).setResizable(false);
            tabelaConsultas.getColumnModel().getColumn(5).setResizable(false);
            tabelaConsultas.getColumnModel().getColumn(6).setResizable(false);
        }

        finalizarConsulta.setBackground(new java.awt.Color(204, 204, 204));
        finalizarConsulta.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        finalizarConsulta.setText("Finalizar Consulta");
        finalizarConsulta.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        finalizarConsulta.setContentAreaFilled(false);
        finalizarConsulta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                finalizarConsultaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane5))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(172, 172, 172)
                                .addComponent(finalizarConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(excluirConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(324, 324, 324)
                                .addComponent(jLabel1)))
                        .addGap(0, 206, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(439, 439, 439)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(excluirConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finalizarConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void excluirConsultaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_excluirConsultaMouseClicked
        if(id == -1){
            JOptionPane.showMessageDialog(null, "É necessário que você selecione alguma consulta para conseguir excluir!");
            return;
        }

        List<String> linhasConsultas = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_CONSULTAS))) {
            String linha;
            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                int idAtual = Integer.parseInt(data[0]);

                if (id != idAtual) {
                    linhasConsultas.add(linha);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_CONSULTAS))) {
            for (String l : linhasConsultas) {
                writer.write(l);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        JOptionPane.showMessageDialog(null, "Consulta removida com sucesso!");

        this.setNulo();
        this.reiniciarTabela();
    }//GEN-LAST:event_excluirConsultaMouseClicked

    private void finalizarConsultaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_finalizarConsultaMouseClicked
        if(id == -1){
            JOptionPane.showMessageDialog(null, "É necessário que você selecione alguma consulta para conseguir finalizar!");
            return;
        }

        List<String> linhas = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_CONSULTAS))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(Integer.parseInt(data[0]) == id) {
                    data[5] = "Concluída";

                    linha = String.join(",", data);
                }
                linhas.add(linha);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na edição da consulta!");
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_CONSULTAS))) {
            for (String l : linhas) {
                writer.write(l);
                writer.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar alterações no CSV!");
        }

        JOptionPane.showMessageDialog(null, "Consulta finalizada com sucesso!");

        this.salvarConsulta(linhaHorario);

        int resposta = JOptionPane.showConfirmDialog(
                null,
                "Deseja realizar o diagnóstico da consulta?",
                "Confirmação",
                JOptionPane.YES_NO_OPTION
        );

        if (resposta == JOptionPane.YES_OPTION) {
            JOptionPane.showMessageDialog(null, "Diagnóstico Iniciado!");
            this.diagnostico();


        } else {
            JOptionPane.showMessageDialog(null, "Diagnóstico Encerrado!");
        }

        this.setNulo();
        this.reiniciarTabela();
    }//GEN-LAST:event_finalizarConsultaMouseClicked

    private void tabelaConsultasAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tabelaConsultasAncestorAdded
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaConsultas.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_CONSULTAS))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");

                if(Objects.equals(data[5], "agendada")) {
                    Object[] dados = { data[0], retornaNomeMedico(Integer.parseInt(data[2])), retornaNomePaciente(Integer.parseInt(data[1])), data[3], data[4], data[5], Double.parseDouble(data[6])};
                    modelTabela.addRow(dados);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na criação automática da lista de consultas");
        }
    }//GEN-LAST:event_tabelaConsultasAncestorAdded

    private void tabelaConsultasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaConsultasMouseClicked
        id = Integer.parseInt(tabelaConsultas.getValueAt(tabelaConsultas.getSelectedRow(), 0).toString());
        linhaHorario = tabelaConsultas.getValueAt(tabelaConsultas.getSelectedRow(), 3).toString();
        nomeUsuario = tabelaConsultas.getValueAt(tabelaConsultas.getSelectedRow(), 2).toString();
    }//GEN-LAST:event_tabelaConsultasMouseClicked

    // retorna o nome do paciente baseado no id enviado, funcionando como se fosse um inner join no mysql
    public String retornaNomePaciente(int idPaciente) {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PACIENTES))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                return null;
            } else {
                String[] data = linha.split(",");
                if(idPaciente == Integer.parseInt(data[0])) {
                    return data[1];
                }
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(idPaciente == Integer.parseInt(data[0])) {
                    return data[1];
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática dos IDs");
        }

        return null;
    }

    // retorna o nome do médico baseado no id enviado, funcionando como se fosse um inner join no mysql
    public String retornaNomeMedico(int idMedico) {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_MEDICOS))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                return null;
            } else {
                String[] data = linha.split(",");
                if(idMedico == Integer.parseInt(data[0])) {
                    return data[1];
                }
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(idMedico == Integer.parseInt(data[0])) {
                    return data[1];
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática dos IDs");
        }
        return null;
    }

    private void diagnostico() {
        String diagnostico = JOptionPane.showInputDialog(
                null,
                "Digite o diagnóstico do paciente:",
                "Diagnóstico",
                JOptionPane.QUESTION_MESSAGE
        );

        if (diagnostico == null || diagnostico.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nenhum diagnóstico informado.");
            return;
        }

        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));


        String nomeArquivo = "diagnostico_" + nomeUsuario + "_" + timestamp + ".csv";

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_DIAGNOSTICOS + nomeArquivo))) {
            writer.write(diagnostico);
            JOptionPane.showMessageDialog(null, "Diagnóstico salvo em: " + FILE_PATH_DIAGNOSTICOS + nomeArquivo);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar o diagnóstico: " + e.getMessage());
        }
    }

    private void reiniciarTabela() {
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaConsultas.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_CONSULTAS))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");

                if(Objects.equals(data[5], "agendada")) {
                    Object[] dados = { data[0], retornaNomeMedico(Integer.parseInt(data[2])), retornaNomePaciente(Integer.parseInt(data[1])), data[3], data[4], data[5], Double.parseDouble(data[6])};
                    modelTabela.addRow(dados);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na criação automática da lista de consultas");
        }
    }

    //Salva a consulta no csv do paciente
    private void salvarConsulta(String novaConsulta) {
        List<String> linhas = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PACIENTES))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");

                String nomeAtual = data[1];

                if (Objects.equals(nomeAtual, nomeUsuario)) {
                    if (data.length == 4) {
                        linha += "," + novaConsulta;
                    } else {
                        linha += ";" + novaConsulta;
                    }
                }
                linhas.add(linha);
            }

        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_PACIENTES))) {
            for (String l : linhas) {
                writer.write(l);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void setNulo() {
        id = -1;
        linhaHorario = null;
        nomeUsuario = null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton excluirConsulta;
    private javax.swing.JButton finalizarConsulta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable tabelaConsultas;
    // End of variables declaration//GEN-END:variables
}
