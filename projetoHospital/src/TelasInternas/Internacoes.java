/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package TelasInternas;

import Controllers.Consultas;
import Controllers.Internacao;
import Controllers.Pacientes;
import Modulos.IdAutomatico;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Objects;

/**
 *
 * @author tung tung tung sahur
 */
public class Internacoes extends javax.swing.JInternalFrame {

    private static final String FILE_PATH_MEDICOS = "data/medicos.csv";
    private static final String FILE_PATH_PLANOS = "data/planosDeSaude.csv";
    private static final String FILE_PATH_PACIENTES = "data/pacientes.csv";
    private static final String FILE_PATH_SALAS = "data/salasInternacao.csv";
    private static final String FILE_PATH_INTERNACAO = "data/internacoes.csv";

    private Integer idPaciente;
    private Integer idMedico;
    private String sala;

    /**
     * Creates new form AgendamentoConsultas
     */
    public Internacoes() {
        initComponents();
        tabelaPacientes.getTableHeader().setReorderingAllowed(false);
        tabelaMedicos.getTableHeader().setReorderingAllowed(false);
        tabelaSalas.getTableHeader().setReorderingAllowed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaPacientes = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaMedicos = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaSalas = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        internarPacienteBotao = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Calibri Light", 0, 36)); // NOI18N
        jLabel1.setText("Internações de Pacientes");

        jLabel3.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel3.setText("Pacientes");

        jLabel4.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel4.setText("Médicos");

        tabelaPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Cpf", "Idade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaPacientes.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tabelaPacientesAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tabelaPacientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaPacientesMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tabelaPacientes);
        if (tabelaPacientes.getColumnModel().getColumnCount() > 0) {
            tabelaPacientes.getColumnModel().getColumn(0).setResizable(false);
            tabelaPacientes.getColumnModel().getColumn(1).setResizable(false);
            tabelaPacientes.getColumnModel().getColumn(2).setResizable(false);
            tabelaPacientes.getColumnModel().getColumn(3).setResizable(false);
        }

        tabelaMedicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Cpf", "Crm", "Especialidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaMedicos.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tabelaMedicosAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tabelaMedicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMedicosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaMedicos);
        if (tabelaMedicos.getColumnModel().getColumnCount() > 0) {
            tabelaMedicos.getColumnModel().getColumn(0).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(1).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(2).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(3).setResizable(false);
            tabelaMedicos.getColumnModel().getColumn(4).setResizable(false);
        }

        tabelaSalas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sala"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaSalas.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tabelaSalasAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tabelaSalas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaSalasMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tabelaSalas);
        if (tabelaSalas.getColumnModel().getColumnCount() > 0) {
            tabelaSalas.getColumnModel().getColumn(0).setResizable(false);
        }

        jLabel6.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel6.setText("Salas Disponíveis");

        internarPacienteBotao.setBackground(new java.awt.Color(204, 204, 204));
        internarPacienteBotao.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        internarPacienteBotao.setText("Internar Paciente");
        internarPacienteBotao.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        internarPacienteBotao.setContentAreaFilled(false);
        internarPacienteBotao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                internarPacienteBotaoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                        .addGap(172, 172, 172)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(317, 317, 317)
                        .addComponent(jLabel4)
                        .addGap(258, 258, 258))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(412, 412, 412)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(419, 419, 419)
                        .addComponent(internarPacienteBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(374, 374, 374)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(514, 514, 514)
                        .addComponent(jLabel6)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(internarPacienteBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tabelaPacientesAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tabelaPacientesAncestorAdded
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaPacientes.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PACIENTES))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                return;
            } else {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3]) };
                modelTabela.addRow(dados);
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3]) };
                modelTabela.addRow(dados);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática dos IDs");
        }
    }//GEN-LAST:event_tabelaPacientesAncestorAdded

    private void tabelaMedicosAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tabelaMedicosAncestorAdded
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaMedicos.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_MEDICOS))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                return;
            } else {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], data[3], data[4]};
                modelTabela.addRow(dados);
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], data[3], data[4]};
                modelTabela.addRow(dados);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática dos IDs");
        }
    }//GEN-LAST:event_tabelaMedicosAncestorAdded

    private void tabelaSalasAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tabelaSalasAncestorAdded
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaSalas.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_SALAS))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                return;
            } else {
                String[] data = linha.split(",");
                Object[] dados = {data[0]};
                modelTabela.addRow(dados);
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                Object[] dados = {data[0]};
                modelTabela.addRow(dados);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática das salas");
        }
    }//GEN-LAST:event_tabelaSalasAncestorAdded

    private void tabelaMedicosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMedicosMouseClicked
        idMedico = Integer.parseInt(tabelaMedicos.getValueAt(tabelaMedicos.getSelectedRow(), 0).toString());
    }//GEN-LAST:event_tabelaMedicosMouseClicked

    private void tabelaPacientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaPacientesMouseClicked
        idPaciente = Integer.parseInt(tabelaPacientes.getValueAt(tabelaPacientes.getSelectedRow(), 0).toString());
    }//GEN-LAST:event_tabelaPacientesMouseClicked

    private void tabelaSalasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaSalasMouseClicked
        sala = tabelaSalas.getValueAt(tabelaSalas.getSelectedRow(), 0).toString();
    }//GEN-LAST:event_tabelaSalasMouseClicked

    private void internarPacienteBotaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_internarPacienteBotaoMouseClicked
        if(idPaciente == null) {
            JOptionPane.showMessageDialog(null, "Você precisa selecionar algum paciente da tabela paciente!");
            return;
        }

        if(idMedico == null) {
            JOptionPane.showMessageDialog(null, "Você precisa selecionar algum médico da tabela médicos!");
            return;
        }

        if(sala == null) {
            JOptionPane.showMessageDialog(null, "Você precisa selecionar alguma sala da tabela!");
            return;
        }

        String linhaHorario = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yy/MM/dd-HH:mm"));

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_INTERNACAO))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");

                if(idPaciente == Integer.parseInt(data[1]) && Objects.equals(data[5], "internado")) {
                    JOptionPane.showMessageDialog(null, "Este paciente ja foi internado!");
                    return;
                }

                //Se estiver marcando no mesmo horario com o mesmo médico
                if((idMedico == Integer.parseInt(data[2]) && Objects.equals(linhaHorario, data[3]) && Objects.equals(data[5], "internado"))) {
                    JOptionPane.showMessageDialog(null, "Uma internação já está sendo efetuada neste horario com este médico!");
                    return;
                }

                //Se estiver marcando com a mesma sala
                if((Objects.equals(sala, data[4]) && Objects.equals(data[5], "internado"))) {
                    JOptionPane.showMessageDialog(null, "Uma internação está sendo efetuada neste local!");
                    return;
                }

                //Se estiver marcando no mesmo horario com o mesmo paciente
                if(Objects.equals(linhaHorario, data[3]) && idPaciente == Integer.parseInt(data[1]) && Objects.equals(data[5], "internado")) {
                    JOptionPane.showMessageDialog(null, "Uma internação com este paciente já foi efetuada neste horario com outro médico!");
                    return;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na criação automática da internação");
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PLANOS))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(idPaciente == Integer.parseInt(data[2])) {
                    Double valorConsulta = (1 - Double.parseDouble(data[3]));
                    Internacao c = new Internacao(IdAutomatico.criarIdAutomatico(0, FILE_PATH_INTERNACAO), idPaciente, idMedico, linhaHorario, sala, "internado", valorConsulta);

                    try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_INTERNACAO, true))) {
                        writer.write(c.toCSV());
                        writer.newLine();
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Erro ao salvar a internação no arquivo CSV!");
                        return;
                    }

                    JOptionPane.showMessageDialog(null, "Internação criada com sucesso!");
                    return;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na criação automática da internação");
        }


        Internacao i1 = new Internacao(IdAutomatico.criarIdAutomatico(0, FILE_PATH_INTERNACAO), idPaciente, idMedico, linhaHorario, sala, "internado");

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_INTERNACAO , true))) {
            writer.write(i1.toCSV());
            writer.newLine();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar a internação no arquivo CSV!");
        }

        JOptionPane.showMessageDialog(null, "Internação criada com sucesso!");
    }//GEN-LAST:event_internarPacienteBotaoMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton internarPacienteBotao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tabelaMedicos;
    private javax.swing.JTable tabelaPacientes;
    private javax.swing.JTable tabelaSalas;
    // End of variables declaration//GEN-END:variables
}
