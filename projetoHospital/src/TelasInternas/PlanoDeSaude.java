 /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package TelasInternas;

import Controllers.Pacientes;
import Controllers.PlanosDeSaude.PlanoDeSaudeBasico;
import Controllers.PlanosDeSaude.PlanoDeSaudeEspecial;
import Controllers.PlanosDeSaude.PlanoDeSaudePadrao;
import Modulos.IdAutomatico;
import Modulos.Validator;

import java.io.*;

import java.util.ArrayList;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.util.Arrays;

public class PlanoDeSaude extends javax.swing.JInternalFrame {

    private static final String FILE_PATH_PACIENTES = "data/pacientes.csv";
    private static final String FILE_PATH_PLANO = "data/planosDeSaude.csv";

    Validator validator = new Validator();

    int id = -1;
    int idUsuario = -1;

    public PlanoDeSaude() {
        initComponents();
        tabelaPacientes.getTableHeader().setReorderingAllowed(false);
        tabelaPlanoDeSaude.getTableHeader().setReorderingAllowed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nomePlanoTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        idUsuarioTxt = new javax.swing.JTextField();
        enviarPlanoDeSaude = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaPacientes = new javax.swing.JTable();
        editarPlanoDeSaude = new javax.swing.JLabel();
        removerPlanoDeSaude = new javax.swing.JLabel();
        pesquisarPacientes = new javax.swing.JLabel();
        reiniciarTabela = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        planoEspecial = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaPlanoDeSaude = new javax.swing.JTable();
        pesquisarPlanoDeSaude = new javax.swing.JLabel();
        descontoCheckBox = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Calibri Light", 0, 36)); // NOI18N
        jLabel1.setText("Cadastro de Planos de Saúde");

        jLabel3.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel3.setText("Nome do Plano");

        nomePlanoTxt.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        nomePlanoTxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel4.setText("Id do Usuário Escolhido");

        jLabel5.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel5.setText("Desconto");

        idUsuarioTxt.setEditable(false);
        idUsuarioTxt.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        idUsuarioTxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        enviarPlanoDeSaude.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/person_add_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        enviarPlanoDeSaude.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enviarPlanoDeSaudeMouseClicked(evt);
            }
        });

        tabelaPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Cpf", "Idade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaPacientes.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tabelaPacientesAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tabelaPacientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaPacientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaPacientes);
        if (tabelaPacientes.getColumnModel().getColumnCount() > 0) {
            tabelaPacientes.getColumnModel().getColumn(0).setResizable(false);
            tabelaPacientes.getColumnModel().getColumn(1).setResizable(false);
            tabelaPacientes.getColumnModel().getColumn(2).setResizable(false);
            tabelaPacientes.getColumnModel().getColumn(3).setResizable(false);
        }

        editarPlanoDeSaude.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/edit_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        editarPlanoDeSaude.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editarPlanoDeSaudeMouseClicked(evt);
            }
        });

        removerPlanoDeSaude.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/person_off_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        removerPlanoDeSaude.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removerPlanoDeSaudeMouseClicked(evt);
            }
        });

        pesquisarPacientes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/search_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        pesquisarPacientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pesquisarPacientesMouseClicked(evt);
            }
        });

        reiniciarTabela.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/refresh_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        reiniciarTabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reiniciarTabelaMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        jLabel6.setText("Plano Especial");

        planoEspecial.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Não", "Sim" }));

        tabelaPlanoDeSaude.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome do Plano", "Id Paciente", "Desconto", "Plano Especial"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaPlanoDeSaude.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tabelaPlanoDeSaudeAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tabelaPlanoDeSaude.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaPlanoDeSaudeMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabelaPlanoDeSaude);
        if (tabelaPlanoDeSaude.getColumnModel().getColumnCount() > 0) {
            tabelaPlanoDeSaude.getColumnModel().getColumn(0).setResizable(false);
            tabelaPlanoDeSaude.getColumnModel().getColumn(1).setResizable(false);
            tabelaPlanoDeSaude.getColumnModel().getColumn(2).setResizable(false);
            tabelaPlanoDeSaude.getColumnModel().getColumn(3).setResizable(false);
            tabelaPlanoDeSaude.getColumnModel().getColumn(4).setResizable(false);
        }

        pesquisarPlanoDeSaude.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/search_24dp_5F6368_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        pesquisarPlanoDeSaude.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pesquisarPlanoDeSaudeMouseClicked(evt);
            }
        });

        descontoCheckBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0.3", "0.4", "0.5" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(408, 408, 408))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 436, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(nomePlanoTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(idUsuarioTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(62, 62, 62))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel6)
                                    .addComponent(planoEspecial, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(enviarPlanoDeSaude)
                                        .addGap(211, 211, 211)
                                        .addComponent(editarPlanoDeSaude, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(161, 161, 161)
                                        .addComponent(removerPlanoDeSaude, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(descontoCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(pesquisarPlanoDeSaude, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(610, 610, 610)
                                .addComponent(reiniciarTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 716, Short.MAX_VALUE)
                                .addComponent(jScrollPane2))
                            .addComponent(pesquisarPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nomePlanoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(idUsuarioTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(descontoCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(planoEspecial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pesquisarPacientes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(enviarPlanoDeSaude)
                                .addComponent(editarPlanoDeSaude))
                            .addComponent(removerPlanoDeSaude))
                        .addComponent(pesquisarPlanoDeSaude))
                    .addComponent(reiniciarTabela))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editarPlanoDeSaudeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editarPlanoDeSaudeMouseClicked
        if(id == -1) {
            JOptionPane.showMessageDialog(null, "Nenhum plano foi selecionado!");
            return;
        }

        if (!validator.isString(nomePlanoTxt.getText(), "nome")) return;
        if (!validator.verificarNome(nomePlanoTxt.getText())) return;
        if (idUsuarioTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Você deve selecionar um usuário para receber o plano!");
            return;
        }
        if(Integer.parseInt(idUsuarioTxt.getText()) != idUsuario) {
            if(!this.verificaJaPossuiPlano(Integer.parseInt(idUsuarioTxt.getText()))) return;
        }

        List<String> linhas = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PLANO))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(Integer.parseInt(data[0]) == id) {
                    data[1] = nomePlanoTxt.getText();
                    data[2] = idUsuarioTxt.getText();
                    if(Objects.equals(data[4], "Não")) {
                        data[3] = (String) descontoCheckBox.getSelectedItem();
                    }

                    linha = String.join(",", data);
                }
                linhas.add(linha);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na edição dos planos!");
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_PLANO))) {
            for (String l : linhas) {
                writer.write(l);
                writer.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar alterações no CSV!");
        }

        this.setarNulo();

        JOptionPane.showMessageDialog(null, "Plano de Saúde editado com sucesso!");
    }//GEN-LAST:event_editarPlanoDeSaudeMouseClicked

    private void removerPlanoDeSaudeMouseClicked(java.awt.event.MouseEvent evt)  {//GEN-FIRST:event_removerPlanoDeSaudeMouseClicked
        List<String> linhas = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PLANO))) {
            String linha;
            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                int idAtual = Integer.parseInt(data[0]);

                if (id != idAtual) {
                    linhas.add(linha);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_PLANO))) {
            for (String l : linhas) {
                writer.write(l);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        this.setarNulo();

        JOptionPane.showMessageDialog(null, "Plano removido com sucesso!");
    }//GEN-LAST:event_removerPlanoDeSaudeMouseClicked

    private void pesquisarPacientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pesquisarPacientesMouseClicked
        reiniciarTabela();

        String nomePlano = JOptionPane.showInputDialog("Digite o nome do usuário: ");
        if(nomePlano == null) {
            JOptionPane.showMessageDialog(null, "Operação cancelada!");
            return;
        }

        if(nomePlano.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nada foi digitado!");
            return;
        }

        DefaultTableModel modelTabela = (DefaultTableModel) tabelaPacientes.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PACIENTES))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                JOptionPane.showMessageDialog(null, "Não existe nenhum paciente!");
                return;
            } else {
                String[] data = linha.split(",");
                if(data[1].toLowerCase().contains(nomePlano.toLowerCase()))  {
                    Object[] dados = {Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3])};
                    modelTabela.addRow(dados);
                }
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(data[1].toLowerCase().contains(nomePlano.toLowerCase()))  {
                    Object[] dados = {Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3])};
                    modelTabela.addRow(dados);
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na pesquisa dos pacientes!");
        }
    }//GEN-LAST:event_pesquisarPacientesMouseClicked

    private void reiniciarTabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reiniciarTabelaMouseClicked
        reiniciarTabela();
    }//GEN-LAST:event_reiniciarTabelaMouseClicked

    private void tabelaPacientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaPacientesMouseClicked
        idUsuarioTxt.setText(tabelaPacientes.getValueAt(tabelaPacientes.getSelectedRow(), 0).toString());
    }//GEN-LAST:event_tabelaPacientesMouseClicked

    private void tabelaPlanoDeSaudeAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tabelaPlanoDeSaudeAncestorAdded
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaPlanoDeSaude.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PLANO))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                return;
            } else {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], Integer.parseInt(data[2]), Double.parseDouble(data[3]), data[4] };
                modelTabela.addRow(dados);
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], Integer.parseInt(data[2]), Double.parseDouble(data[3]), data[4] };
                modelTabela.addRow(dados);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática dos IDs");
        }

        nomePlanoTxt.setText("");
        idUsuarioTxt.setText("");
        descontoCheckBox.setSelectedIndex(0);
        planoEspecial.setSelectedIndex(0);
    }//GEN-LAST:event_tabelaPlanoDeSaudeAncestorAdded

    private void tabelaPlanoDeSaudeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaPlanoDeSaudeMouseClicked
        id = Integer.parseInt(tabelaPlanoDeSaude.getValueAt(tabelaPlanoDeSaude.getSelectedRow(), 0).toString());
        idUsuario = Integer.parseInt(tabelaPlanoDeSaude.getValueAt( tabelaPlanoDeSaude.getSelectedRow(), 2).toString());
        nomePlanoTxt.setText(tabelaPlanoDeSaude.getValueAt(tabelaPlanoDeSaude.getSelectedRow(), 1).toString());
        descontoCheckBox.setSelectedItem(tabelaPlanoDeSaude.getValueAt(tabelaPlanoDeSaude.getSelectedRow(), 3).toString());
    }//GEN-LAST:event_tabelaPlanoDeSaudeMouseClicked

    private void pesquisarPlanoDeSaudeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pesquisarPlanoDeSaudeMouseClicked
        reiniciarTabela();

        String nomePlano = JOptionPane.showInputDialog("Digite o nome do plano: ");
        if(nomePlano == null) {
            JOptionPane.showMessageDialog(null, "Operação cancelada!");
            return;
        }

        if(nomePlano.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nada foi digitado!");
            return;
        }

        DefaultTableModel modelTabela = (DefaultTableModel) tabelaPlanoDeSaude.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PLANO))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                JOptionPane.showMessageDialog(null, "Não existe nenhum paciente!");
                return;
            } else {
                String[] data = linha.split(",");
                if(data[1].toLowerCase().contains(nomePlano.toLowerCase()))  {
                    Object[] dados = {Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3])};
                    modelTabela.addRow(dados);
                }
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(data[1].toLowerCase().contains(nomePlano.toLowerCase()))  {
                    Object[] dados = {Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3])};
                    modelTabela.addRow(dados);
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na pesquisa dos pacientes!");
        }
    }//GEN-LAST:event_pesquisarPlanoDeSaudeMouseClicked

    private void tabelaPacientesAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tabelaPacientesAncestorAdded
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaPacientes.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PACIENTES))) {
            String linha;
            if((linha = reader.readLine()) == null) {
                return;
            } else {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3]) };
                modelTabela.addRow(dados);
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], data[2], Integer.parseInt(data[3]) };
                modelTabela.addRow(dados);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática dos IDs");
        }
    }//GEN-LAST:event_tabelaPacientesAncestorAdded

    private void enviarPlanoDeSaudeMouseClicked(java.awt.event.MouseEvent evt) {
        if (!validator.isString(nomePlanoTxt.getText(), "nome")) return;
        if (!validator.verificarNome(nomePlanoTxt.getText())) return;
        if (idUsuarioTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Você deve selecionar um usuário para receber o plano!");
            return;
        }
        idUsuario = -1;

        if(!this.verificaJaPossuiPlano(Integer.parseInt(idUsuarioTxt.getText()))) return;

        boolean isVelho = false;

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PACIENTES))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if (Integer.parseInt(data[0]) == Integer.parseInt(idUsuarioTxt.getText()) && Integer.parseInt(data[3]) >= 60) {
                   isVelho = true;
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na pesquisa dos pacientes!");
        }

        if (isVelho){

            PlanoDeSaudeEspecial pe1 = new PlanoDeSaudeEspecial(IdAutomatico.criarIdAutomatico(0, FILE_PATH_PLANO), nomePlanoTxt.getText(), Integer.parseInt(idUsuarioTxt.getText()), Double.parseDouble((String) descontoCheckBox.getSelectedItem()));

            try(BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_PLANO, true))) {
                writer.write(pe1.toCSV());
                writer.newLine();
                JOptionPane.showMessageDialog(null, "Plano de saúde especial criado com sucesso!");
            } catch(IOException e) {
                JOptionPane.showMessageDialog(null, "Houve algum erro na criação do plano especial, por favor feche e abra a aplicação.");
            }
            this.setarNulo();
        } else if(planoEspecial.getSelectedIndex() == 0) {

            PlanoDeSaudeBasico p1 = new PlanoDeSaudeBasico(IdAutomatico.criarIdAutomatico(0, FILE_PATH_PLANO), nomePlanoTxt.getText(), Integer.parseInt(idUsuarioTxt.getText()), Double.parseDouble((String) descontoCheckBox.getSelectedItem()));

            try(BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_PLANO, true))) {
                    writer.write(p1.toCSV());
                    writer.newLine();
                    JOptionPane.showMessageDialog(null, "Plano de saúde criado com sucesso!");
            } catch(IOException e) {
                JOptionPane.showMessageDialog(null, "Houve algum erro na criação do plano, por favor feche e abra a aplicação.");
            }
            this.setarNulo();
        } else if (planoEspecial.getSelectedIndex() == 1) {

            PlanoDeSaudeEspecial pe1 = new PlanoDeSaudeEspecial(IdAutomatico.criarIdAutomatico(0, FILE_PATH_PLANO), nomePlanoTxt.getText(), Integer.parseInt(idUsuarioTxt.getText()), Double.parseDouble((String) descontoCheckBox.getSelectedItem()));

            try(BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_PATH_PLANO, true))) {
                writer.write(pe1.toCSV());
                writer.newLine();
                JOptionPane.showMessageDialog(null, "Plano de saúde especial criado com sucesso!");
            } catch(IOException e) {
                JOptionPane.showMessageDialog(null, "Houve algum erro na criação do plano especial, por favor feche e abra a aplicação.");
            }
            this.setarNulo();
        }
    }

    private void reiniciarTabela() {
        DefaultTableModel modelTabela = (DefaultTableModel) tabelaPlanoDeSaude.getModel();
        modelTabela.setNumRows(0);

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PLANO))) {
            String linha;

            if((linha = reader.readLine()) == null) {
                return;
            } else {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], Integer.parseInt(data[2]), Double.parseDouble(data[3]), data[4] };
                modelTabela.addRow(dados);
            }

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                Object[] dados = { Integer.parseInt(data[0]), data[1], Integer.parseInt(data[2]), Double.parseDouble(data[3]), data[4] };
                modelTabela.addRow(dados);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na listagem automática dos IDs");
        }

        this.setarNulo();
    }

    //Verifica se o usuário sendo criado já possui plano
    private boolean verificaJaPossuiPlano(int idUsuario) {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH_PLANO))) {
            String linha;

            while ((linha = reader.readLine()) != null) {
                String[] data = linha.split(",");
                if(Integer.parseInt(data[2]) == idUsuario)  {
                    JOptionPane.showMessageDialog(null, "O usuário selecionado já possui um plano!");
                    return false;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Houve algum erro na pesquisa dos planos!");
        }
        return true;
    }

    private void setarNulo() {
        nomePlanoTxt.setText("");
        idUsuarioTxt.setText("");
        descontoCheckBox.setSelectedIndex(0);
        planoEspecial.setSelectedIndex(0);
        id = -1;
        idUsuario = -1;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> descontoCheckBox;
    private javax.swing.JLabel editarPlanoDeSaude;
    private javax.swing.JLabel enviarPlanoDeSaude;
    private javax.swing.JTextField idUsuarioTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nomePlanoTxt;
    private javax.swing.JLabel pesquisarPacientes;
    private javax.swing.JLabel pesquisarPlanoDeSaude;
    private javax.swing.JComboBox<String> planoEspecial;
    private javax.swing.JLabel reiniciarTabela;
    private javax.swing.JLabel removerPlanoDeSaude;
    private javax.swing.JTable tabelaPacientes;
    private javax.swing.JTable tabelaPlanoDeSaude;
    // End of variables declaration//GEN-END:variables
}
